set nocompatible

" ---------- plugins ---------

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

call pathogen#infect()

" Syntastic
let g:syntastic_auto_loc_list=1

" Tagbar
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_autofocus = 1

" Ropevim
if(filereadable(expand('~/.vim/plugin/ropevim.vim')))
	let ropevim_vim_completion=1 "Replace vim's complete function with ropevim
	let ropevim_extended_complete=1
endif

" Command-T
let g:CommandTMaxFiles=999999

" ---------- settings ---------

let mapleader = ","
set mouse=a

" Filetype highlighting
filetype plugin indent on
syntax on

" Show what you are typing mid-command
set showcmd

" Indentation/tabs
set autoindent
set noexpandtab " in python, use real tabs

" 4 spaces by default
set tabstop=4
set softtabstop=4
set shiftwidth=4

augroup indent_defaults
	autocmd!
	" Except HTML - 2 spaces
	autocmd BufWinEnter *.html setlocal tabstop=2
	autocmd BufWinEnter *.html setlocal expandtab
	autocmd BufWinEnter *.html setlocal shiftwidth=2
	" Except JS - 2 spaces
	autocmd BufWinEnter *.js setlocal expandtab
augroup END


" highlight trailing whitespace and non-tab indents
augroup highlight_whitespace
	autocmd!
	autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
	autocmd BufWinEnter *.* match ExtraWhitespace /\s\+$/
	autocmd BufWinLeave * call clearmatches()
augroup END

" Color scheme and font
colorscheme xoria256
set guifont=Monaco:h12

" Highlight current line
set cursorline

" Statusline
set laststatus=2 " Show statusline even when there is a single window
set statusline=%F%m%r%h%w%{fugitive#statusline()}
set statusline+=[%l,%v][%p%%]

" Maintain more text around the cursor
set scrolloff=3

" Show line numbers
set number

" More intelligent backspace and left/right movement
set backspace=eol,start,indent
set whichwrap=b,s,h,l,<,>,[,]

" Hidden buffer support
set hidden

" Disable annoying messages, swap file already exists
set autoread
set shortmess+=IA

" Longer history
set history=1000

" Case-smart searching (case-sensitive only if capital letter in search)
set ignorecase
set smartcase

" Incremental search
set incsearch

" Tab completion
set wildmode=longest,list
set wildignore=*.pyc

" Visual bell instead of beep
set visualbell

" keep backups and temp files in ~.vim/
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

" set default split opening position to be below and to the right of currently active split
set splitbelow
set splitright

" Tags - recursively check parent directories for tags file
set tags+=./.tags,.tags,../.tags,../../.tags

" Filetypes
augroup filetype_mako
	autocmd!
	autocmd BufEnter *.mako setlocal filetype=html
augroup END

" ---------- mappings ---------

" Typos and things I don't want to do
nnoremap Q <ESC>
nnoremap :Q :q
nnoremap :W :w
nnoremap :WQ :wq

" Windows
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

" Util move curr line down/up
nnoremap - ddp
nnoremap _ ddkP
" mocement [p]arams <-- [i]nside parenthesis
onoremap p i(
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>

" Function key shortcuts
noremap <F1> <nop>
noremap <F3> :set hlsearch! hlsearch?<CR>
noremap <F6> :NERDTreeClose<CR>
noremap <F7> :NERDTreeFind<CR> "TODO combine with F6 to make toggle
noremap tt :TagbarToggle<cr>
noremap <F9> :!/usr/bin/ctags -L <(find . -name '*.py') --fields=+iaS --python-kinds=-i --sort=yes --extra=+q<cr>

" Leader shortcuts
nnoremap <Leader>1 :tabnext 1<CR>
nnoremap <Leader>2 :tabnext 2<CR>
nnoremap <Leader>3 :tabnext 3<CR>
nnoremap <Leader>4 :tabnext 4<CR>
nnoremap <Leader>5 :tabnext 5<CR>
nnoremap <Leader>6 :tabnext 6<CR>
nnoremap <Leader>7 :tabnext 7<CR>
nnoremap <Leader>8 :tabnext 8<CR>
nnoremap <Leader>9 :tabnext 9<CR>


nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <Leader>v :tabe ~/.vimrc<CR>
nnoremap <Leader>e :tabe
nnoremap <Leader>E :e <C-R>=expand('%:p:h') . '/'<CR>
" open current buffer in new tab
nnoremap <Leader>s :tab split<CR>
nnoremap <Leader>T :tabnew<CR>:CommandT<CR>
nnoremap <Leader>n :tabnew<CR>
nnoremap <Leader>Q :tabc<CR>
"map <Leader>m :tabm
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>l :lclose<CR>
nnoremap <Leader>L :lopen<CR>
nnoremap <Leader>c :copen<CR>
nnoremap <Leader>C :cclose<CR>
nnoremap <Leader>z :cp<CR>
nnoremap <Leader>x :cn<CR>
" git diff in new tab
nnoremap <Leader>f :tab split<CR>:Gdiff canon/master<CR>
nnoremap <Leader>g :tab split<CR>:Ggrep
" commit log for current file
nnoremap <Leader>o :Glog -- %<CR>:copen<CR>
nnoremap <Leader>i Oimport ipdb; ipdb.set_trace()<ESC>
nnoremap <Leader>I Oimport pudb; pudb.set_trace()<ESC>
" these are already set by Command-T, but let's be explicit
nnoremap <Leader>t :CommandT<CR>
nnoremap <Leader>b :CommandTBuffer<CR>

" ---------- yelp stuff ---------

if(match(hostname(), 'dev26') >= 0)
	nnoremap <Leader>r :!cd ~/pg/yelp-main/templates && make && cd ~/pg/yelp-main/mobile_templates && make -f ../templates/Makefile<CR>
	set wildignore+=build/**,templates/*.py*,mobile_templates/*.py*,biz_templates/*.py*,admin_templates/*.py*,lite_templates/*.py*
	augroup filetype_template
		autocmd!
		autocmd BufEnter *.css.tmpl setlocal filetype=css
		autocmd BufEnter *.js.tmpl setlocal filetype=javascript
	augroup END
endif
